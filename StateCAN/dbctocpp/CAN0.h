/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.4.0 Wed Nov 11 21:32:39 2020.
 */

#ifndef CAN0_H
#define CAN0_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CAN0_TCGPS_11_FRAME_ID (0xa1u)
#define CAN0_MM5_02_FRAME_ID (0x17cu)
#define CAN0_MM5_01_FRAME_ID (0x178u)
#define CAN0_MM5_00_FRAME_ID (0x174u)
#define CAN0_M400_DATA_SET2_FRAME_ID (0x65u)
#define CAN0_M400_DATA_SET1_FRAME_ID (0x64u)

/* Frame lengths in bytes. */
#define CAN0_TCGPS_11_LENGTH (8u)
#define CAN0_MM5_02_LENGTH (8u)
#define CAN0_MM5_01_LENGTH (8u)
#define CAN0_MM5_00_LENGTH (8u)
#define CAN0_M400_DATA_SET2_LENGTH (8u)
#define CAN0_M400_DATA_SET1_LENGTH (8u)

/* Extended or standard frame types. */
#define CAN0_TCGPS_11_IS_EXTENDED (0)
#define CAN0_MM5_02_IS_EXTENDED (0)
#define CAN0_MM5_01_IS_EXTENDED (0)
#define CAN0_MM5_00_IS_EXTENDED (0)
#define CAN0_M400_DATA_SET2_IS_EXTENDED (0)
#define CAN0_M400_DATA_SET1_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message TCGPS_11.
 *
 * All signal values are as on the CAN bus.
 */
struct CAN0_tcgps_11_t {
    /**
     * 100 = sucess
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t tcgps_laptrigger;
};

/**
 * Signals in message MM5_02.
 *
 * All signal values are as on the CAN bus.
 */
struct CAN0_mm5_02_t {
    /**
     * Range: -
     * Scale: -0.0001274
     * Offset: -4.1745795
     */
    uint16_t mm5_az;
};

/**
 * Signals in message MM5_01.
 *
 * All signal values are as on the CAN bus.
 */
struct CAN0_mm5_01_t {
    /**
     * Range: -
     * Scale: -0.005
     * Offset: 163.9
     */
    uint16_t mm5_roll_rate;

    /**
     * Range: -
     * Scale: -0.0001274
     * Offset: 4.1745795
     */
    uint16_t mm5_ax;
};

/**
 * Signals in message MM5_00.
 *
 * All signal values are as on the CAN bus.
 */
struct CAN0_mm5_00_t {
    /**
     * Range: -
     * Scale: 0.005
     * Offset: -163.9
     */
    uint16_t mm5_yaw_rate;

    /**
     * Range: -
     * Scale: -0.0001274
     * Offset: 4.1745795
     */
    uint16_t mm5_ay;
};

/**
 * Signals in message M400_dataSet2.
 *
 * All signal values are as on the CAN bus.
 */
struct CAN0_m400_data_set2_t {
    /**
     * Multiplexer Row Counter for M400 Custom Data Set 2
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t m400_row_counter_data_set2;

    /**
     * Oil Temp
     *
     * Range: -32768..32767 (-3276.8..3276.7 C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_oil_temp;

    /**
     * La1 Long Term Trim
     *
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_la1_long_term_trim;

    /**
     * Ign ET Comp
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign_et_comp;

    /**
     * Ign Base Advance
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign_base_advance;

    /**
     * Ign 3 Advance
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign3_advance;

    /**
     * Fuel Used
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_fuel_used;

    /**
     * Fuel Pressure
     *
     * Range: -32768..32767 (-3276.8..3276.7 PSI)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_pressure;

    /**
     * Fuel Inj Duty Cycle
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_inj_duty_cycle;

    /**
     * Fuel ET Comp
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_et_comp;

    /**
     * Fuel AT Comp
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_at_comp;

    /**
     * Fuel 3 Indiv Trim
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_fuel3_indiv_trim;

    /**
     * Exhaust Gas Temp 4
     *
     * Range: -32768..32767 (-32768..32767 C)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_exhaust_gas_temp4;

    /**
     * Exhaust Gas Temp 1
     *
     * Range: -32768..32767 (-32768..32767 C)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_exhaust_gas_temp1;

    /**
     * ECU CPU Usage
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ecu_cpu_usage;

    /**
     * Aux Out7 Duty Cycle
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_aux_out7_duty_cycle;

    /**
     * Aux Out4 Duty Cycle
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_aux_out4_duty_cycle;

    /**
     * Aux Out1 Duty Cycle
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_aux_out1_duty_cycle;

    /**
     * Manifold Pressure
     *
     * Range: -32768..32767 (-3276.8..3276.7 kPa)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_manifold_pressure;

    /**
     * Ign MAP Comp
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign_map_comp;

    /**
     * Ign Comp 1
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign_comp1;

    /**
     * Ign 4 Advance
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign4_advance;

    /**
     * Ign 1 Advance
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign1_advance;

    /**
     * Fuel Starting Comp
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_starting_comp;

    /**
     * Fuel Lambda Comp
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_fuel_lambda_comp;

    /**
     * Fuel FP Comp
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_fp_comp;

    /**
     * Fuel Comp 1
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_comp1;

    /**
     * Fuel 4 Indiv Trim
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_fuel4_indiv_trim;

    /**
     * Fuel 1 Indiv Trim
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_fuel1_indiv_trim;

    /**
     * Exhaust Gas Temp 2
     *
     * Range: -32768..32767 (-32768..32767 C)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_exhaust_gas_temp2;

    /**
     * ECU Internal Temp
     *
     * Range: -32768..32767 (-3276.8..3276.7 C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ecu_internal_temp;

    /**
     * Aux Out8 Duty Cycle
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_aux_out8_duty_cycle;

    /**
     * Aux Out5 Duty Cycle
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_aux_out5_duty_cycle;

    /**
     * Aux Out2 Duty Cycle
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_aux_out2_duty_cycle;

    /**
     * Oil Pressure
     *
     * Range: -32768..32767 (-3276.8..3276.7 PSI)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_oil_pressure;

    /**
     * Inlet Air Temp
     *
     * Range: -32768..32767 (-3276.8..3276.7 C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_inlet_air_temp;

    /**
     * Ign Comp 2
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign_comp2;

    /**
     * Ign AT Comp
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign_at_comp;

    /**
     * Ign 2 Advance
     *
     * Range: -32768..32767 (-3276.8..3276.7 deg)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ign2_advance;

    /**
     * Fuel Temp
     *
     * Range: -32768..32767 (-3276.8..3276.7 C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_temp;

    /**
     * Fuel MAP Comp
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_map_comp;

    /**
     * Fuel FT Comp
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_ft_comp;

    /**
     * Fuel Comp 2
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_comp2;

    /**
     * Fuel Actual Pulse W
     *
     * Range: -32768..32767 (-65.536..65.534 ms)
     * Scale: 0.002
     * Offset: 0
     */
    int16_t m400_fuel_actual_pulse_w;

    /**
     * Fuel 2 Indiv Trim
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_fuel2_indiv_trim;

    /**
     * Exhaust Gas Temp 3
     *
     * Range: -32768..32767 (-32768..32767 C)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_exhaust_gas_temp3;

    /**
     * Engine Temp
     *
     * Range: -32768..32767 (-3276.8..3276.7 C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_engine_temp;

    /**
     * Battery Voltage
     *
     * Range: -32768..32767 (-327.68..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t m400_battery_voltage;

    /**
     * Aux Out6 Duty Cycle
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_aux_out6_duty_cycle;

    /**
     * Aux Out3 Duty Cycle
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_aux_out3_duty_cycle;
};

/**
 * Signals in message M400_dataSet1.
 *
 * All signal values are as on the CAN bus.
 */
struct CAN0_m400_data_set1_t {
    /**
     * Multiplexer Row Counter for M400 Custom Data Set 1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t m400_row_counter_data_set1;

    /**
     * La1 Aim Value
     *
     * Range: -32768..32767 (-32.768..32.767 -)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t m400_la1_aim_value;

    /**
     * Fuel Cut Level Total
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_cut_level_total;

    /**
     * Gear
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_gear;

    /**
     * Ign Cut Level Total
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_ign_cut_level_total;

    /**
     * TC Slip Aim Error
     *
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_tc_slip_aim_error;

    /**
     * TC Ign Retard
     *
     * Range: -32768..32767 (-32768..32767 deg)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_tc_ignretard;

    /**
     * Ground Speed
     *
     * Range: -32768..32767 (-3276.8..3276.7 MPH)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ground_speed;

    /**
     * Drive Speed
     *
     * Range: -32768..32767 (-3276.8..3276.7 MPH)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_drive_speed;

    /**
     * La1 Short Term Trim
     *
     * Range: -32768..32767 (-327.68..327.67 -)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t m400_la1_short_term_trim;

    /**
     * Fuel Overall Trim
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_fuel_overall_trim;

    /**
     * Gear Det
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_gear_det;

    /**
     * RPM
     *
     * Range: -32768..32767 (-32768..32767 RPM)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_rpm;

    /**
     * TC Slip Aim Value
     *
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_tc_slip_aim_value;

    /**
     * TC Launch Aim RPM
     *
     * Range: -32768..32767 (-32768..32767 RPM)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_tc_launch_aim_rpm;

    /**
     * Ground Speed Left
     *
     * Range: -32768..32767 (-3276.8..3276.7 MPH)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ground_speed_left;

    /**
     * Drive Speed Left
     *
     * Range: -32768..32767 (-3276.8..3276.7 MPH)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_drive_speed_left;

    /**
     * Lambda 1
     *
     * Range: -32768..32767 (-32.768..32.767 -)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t m400_lambda1;

    /**
     * Ign Overall Trim
     *
     * Range: -32768..32767 (-32768..32767 deg)
     * Scale: 1
     * Offset: 0
     */
    int16_t m400_ign_overall_trim;

    /**
     * Gear Sensor Voltage
     *
     * Range: -32768..32767 (-32.768..32.767 V)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t m400_gear_sensor_voltage;

    /**
     * Throttle Position
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_throttle_position;

    /**
     * Wheel Slip
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_wheel_slip;

    /**
     * TC Power Reduction
     *
     * Range: 0..750 (0..75 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_tc_power_reduction;

    /**
     * Ground Speed Right
     *
     * Range: -32768..32767 (-3276.8..3276.7 MPH)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_ground_speed_right;

    /**
     * Drive Speed Right
     *
     * Range: -32768..32767 (-3276.8..3276.7 MPH)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t m400_drive_speed_right;
};

/**
 * Pack message TCGPS_11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CAN0_tcgps_11_pack(
    uint8_t *dst_p,
    const struct CAN0_tcgps_11_t *src_p,
    size_t size);

/**
 * Unpack message TCGPS_11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CAN0_tcgps_11_unpack(
    struct CAN0_tcgps_11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CAN0_tcgps_11_tcgps_laptrigger_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_tcgps_11_tcgps_laptrigger_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_tcgps_11_tcgps_laptrigger_is_in_range(int8_t value);

/**
 * Pack message MM5_02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CAN0_mm5_02_pack(
    uint8_t *dst_p,
    const struct CAN0_mm5_02_t *src_p,
    size_t size);

/**
 * Unpack message MM5_02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CAN0_mm5_02_unpack(
    struct CAN0_mm5_02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CAN0_mm5_02_mm5_az_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_mm5_02_mm5_az_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_mm5_02_mm5_az_is_in_range(uint16_t value);

/**
 * Pack message MM5_01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CAN0_mm5_01_pack(
    uint8_t *dst_p,
    const struct CAN0_mm5_01_t *src_p,
    size_t size);

/**
 * Unpack message MM5_01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CAN0_mm5_01_unpack(
    struct CAN0_mm5_01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CAN0_mm5_01_mm5_roll_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_mm5_01_mm5_roll_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_mm5_01_mm5_roll_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CAN0_mm5_01_mm5_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_mm5_01_mm5_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_mm5_01_mm5_ax_is_in_range(uint16_t value);

/**
 * Pack message MM5_00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CAN0_mm5_00_pack(
    uint8_t *dst_p,
    const struct CAN0_mm5_00_t *src_p,
    size_t size);

/**
 * Unpack message MM5_00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CAN0_mm5_00_unpack(
    struct CAN0_mm5_00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CAN0_mm5_00_mm5_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_mm5_00_mm5_yaw_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_mm5_00_mm5_yaw_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CAN0_mm5_00_mm5_ay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_mm5_00_mm5_ay_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_mm5_00_mm5_ay_is_in_range(uint16_t value);

/**
 * Pack message M400_dataSet2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CAN0_m400_data_set2_pack(
    uint8_t *dst_p,
    const struct CAN0_m400_data_set2_t *src_p,
    size_t size);

/**
 * Unpack message M400_dataSet2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CAN0_m400_data_set2_unpack(
    struct CAN0_m400_data_set2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CAN0_m400_data_set2_m400_row_counter_data_set2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_row_counter_data_set2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_row_counter_data_set2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_oil_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_oil_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_oil_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_la1_long_term_trim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_la1_long_term_trim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_la1_long_term_trim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign_et_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign_et_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign_et_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign_base_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign_base_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign_base_advance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign3_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign3_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign3_advance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_used_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_used_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_used_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_pressure_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_pressure_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_inj_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_inj_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_inj_duty_cycle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_et_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_et_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_et_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_at_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_at_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_at_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel3_indiv_trim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel3_indiv_trim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel3_indiv_trim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_exhaust_gas_temp4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_exhaust_gas_temp4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_exhaust_gas_temp4_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_exhaust_gas_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_exhaust_gas_temp1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_exhaust_gas_temp1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ecu_cpu_usage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ecu_cpu_usage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ecu_cpu_usage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_aux_out7_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_aux_out7_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_aux_out7_duty_cycle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_aux_out4_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_aux_out4_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_aux_out4_duty_cycle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_aux_out1_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_aux_out1_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_aux_out1_duty_cycle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_manifold_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_manifold_pressure_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_manifold_pressure_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign_map_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign_map_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign_map_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign_comp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign_comp1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign_comp1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign4_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign4_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign4_advance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign1_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign1_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign1_advance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_starting_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_starting_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_starting_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_lambda_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_lambda_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_lambda_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_fp_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_fp_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_fp_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_comp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_comp1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_comp1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel4_indiv_trim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel4_indiv_trim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel4_indiv_trim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel1_indiv_trim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel1_indiv_trim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel1_indiv_trim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_exhaust_gas_temp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_exhaust_gas_temp2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_exhaust_gas_temp2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ecu_internal_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ecu_internal_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ecu_internal_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_aux_out8_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_aux_out8_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_aux_out8_duty_cycle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_aux_out5_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_aux_out5_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_aux_out5_duty_cycle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_aux_out2_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_aux_out2_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_aux_out2_duty_cycle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_oil_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_oil_pressure_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_oil_pressure_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_inlet_air_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_inlet_air_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_inlet_air_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign_comp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign_comp2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign_comp2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign_at_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign_at_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign_at_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_ign2_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_ign2_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_ign2_advance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_map_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_map_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_map_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_ft_comp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_ft_comp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_ft_comp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_comp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_comp2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_comp2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel_actual_pulse_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel_actual_pulse_w_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel_actual_pulse_w_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_fuel2_indiv_trim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_fuel2_indiv_trim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_fuel2_indiv_trim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_exhaust_gas_temp3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_exhaust_gas_temp3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_exhaust_gas_temp3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_engine_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_engine_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_engine_temp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_battery_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_battery_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_battery_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_aux_out6_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_aux_out6_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_aux_out6_duty_cycle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set2_m400_aux_out3_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set2_m400_aux_out3_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set2_m400_aux_out3_duty_cycle_is_in_range(int16_t value);

/**
 * Pack message M400_dataSet1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CAN0_m400_data_set1_pack(
    uint8_t *dst_p,
    const struct CAN0_m400_data_set1_t *src_p,
    size_t size);

/**
 * Unpack message M400_dataSet1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CAN0_m400_data_set1_unpack(
    struct CAN0_m400_data_set1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CAN0_m400_data_set1_m400_row_counter_data_set1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_row_counter_data_set1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_row_counter_data_set1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_la1_aim_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_la1_aim_value_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_la1_aim_value_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_fuel_cut_level_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_fuel_cut_level_total_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_fuel_cut_level_total_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_gear_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_gear_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_ign_cut_level_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_ign_cut_level_total_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_ign_cut_level_total_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_tc_slip_aim_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_tc_slip_aim_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_tc_slip_aim_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_tc_ignretard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_tc_ignretard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_tc_ignretard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_ground_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_ground_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_ground_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_drive_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_drive_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_drive_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_la1_short_term_trim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_la1_short_term_trim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_la1_short_term_trim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_fuel_overall_trim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_fuel_overall_trim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_fuel_overall_trim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_gear_det_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_gear_det_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_gear_det_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_rpm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_rpm_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_tc_slip_aim_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_tc_slip_aim_value_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_tc_slip_aim_value_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_tc_launch_aim_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_tc_launch_aim_rpm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_tc_launch_aim_rpm_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_ground_speed_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_ground_speed_left_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_ground_speed_left_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_drive_speed_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_drive_speed_left_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_drive_speed_left_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_lambda1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_lambda1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_lambda1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_ign_overall_trim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_ign_overall_trim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_ign_overall_trim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_gear_sensor_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_gear_sensor_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_gear_sensor_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_throttle_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_throttle_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_throttle_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_wheel_slip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_wheel_slip_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_wheel_slip_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_tc_power_reduction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_tc_power_reduction_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_tc_power_reduction_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_ground_speed_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_ground_speed_right_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_ground_speed_right_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CAN0_m400_data_set1_m400_drive_speed_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CAN0_m400_data_set1_m400_drive_speed_right_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CAN0_m400_data_set1_m400_drive_speed_right_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
